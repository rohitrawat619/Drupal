#!/bin/bash -p
set -u

<<<<<<< HEAD
# Fail fast with concise message when not using bash
# Single brackets is needed here for POSIX compatibility
# shellcheck disable=SC2292
if [ -z "${BASH_VERSION:-}" ]
then
  echo "Error: Bash is required to run brew." >&2
=======
if Process.uid == 0
  # technically this is not the correct place, this cache is for *all users*
  # so in that case, maybe we should always use it, root or not?
  HOMEBREW_CACHE=Pathname.new("/Library/Caches/Homebrew")
else
  HOMEBREW_CACHE=Pathname.new("~/Library/Caches/Homebrew").expand_path
end

HOMEBREW_PREFIX=(Pathname.getwd+__FILE__).dirname.parent.cleanpath
HOMEBREW_CELLAR=HOMEBREW_PREFIX+'Cellar'
HOMEBREW_VERSION='0.4'
HOMEBREW_WWW='http://bit.ly/Homebrew'
HOMEBREW_USER_AGENT="Homebrew #{HOMEBREW_VERSION} (Ruby #{VERSION}; Mac OS X 10.5 Leopard)"

if %w[/ /usr].include? HOMEBREW_PREFIX.to_s then abort <<-EOS
  You have placed Homebrew at the prefix: #{HOMEBREW_PREFIX}
  This is not currently supported. Voice your support for this feature at:
  #{HOMEBREW_WWW}
  EOS
end
if `sw_vers -productVersion` =~ /10\.(\d)\.(\d+)/ and $1.to_i < 5
  onoe "Homebrew requires Leopard or higher"
  abort "But thanks for your interest anyway!"
end
if Hardware.cpu_type == :ppc or Hardware.cpu_type == :dunno
  abort "Sorry, Homebrew does not support your computer's CPU architecture."
end
unless system "which -s gcc-4.2" and $?.success?
  abort "Sorry, Homebrew requires gcc 4.2, which is provided by Xcode 3.1"
end

begin
  case ARGV.shift
    when '--prefix' then puts HOMEBREW_PREFIX
    when '--cache' then puts HOMEBREW_CACHE
    when '-h', '--help', '--usage', '-?' then puts ARGV.usage
    when '-v', '--version' then puts HOMEBREW_VERSION

    when 'home', 'homepage'
      if ARGV.named_empty?
        exec "open", HOMEBREW_WWW
      else
        exec "open", *ARGV.formulae.collect {|f| f.homepage}
      end

    when 'ls', 'list'
      if ARGV.named_empty?
        ENV['CLICOLOR']=nil
        exec 'ls', *ARGV.options<<HOMEBREW_CELLAR
      else
        exec "find", *ARGV.kegs+%w[-not -type d -print]
      end

    when 'search', '-S'
      formulae = (HOMEBREW_PREFIX+'Library'+'Formula').children.sort.map{|f| f.basename('.rb') }
      puts_columns formulae.grep(Regexp.new(ARGV.first || ''))

    when 'edit'
      if ARGV.named_empty?
        # EDITOR isn't a good fit here, we need a GUI client that actually has
        # a UI for projects, so apologies if this wasn't what you expected,
        # please improve it! :)
        exec 'mate', *Dir["#{HOMEBREW_PREFIX}/Library/*"]<<
                          "#{HOMEBREW_PREFIX}/bin/brew"<<
                          "#{HOMEBREW_PREFIX}/README"
      else
        exec_editor *ARGV.formulae.collect {|f| f.path}
      end

    when 'install'
      if ARGV.named_empty?
        puts "You must specify a formula. Search for available formulae with `brew search'."
        exit 0
      end

      require 'brewkit'

      if ARGV.verbose?
        ohai "Build Environment"
        %w[CFLAGS LDFLAGS CPPFLAGS MAKEFLAGS CC CXX].each do |f|
          puts "#{f}: #{ENV[f]}" unless ENV[f].to_s.empty?
        end
      end

      unless system "which #{ENV['CC'] or 'cc'} &> /dev/null" and $?.success?
        raise "We cannot find a c compiler, have you installed the latest Xcode?"
      end

      fae = ARGV.formulae.reject do |f|
        if f.installed? and not ARGV.force?
          message = "Formula already installed: #{f.prefix}"
          if ARGV.formulae.count > 1
            opoo message
          else
            puts message # if only one is being installed a warning looks severe
          end
          true
        end
      end

      fae=expand_deps ARGV.formulae

      require 'beer_events'

      watch_out_for_spill do
        fae.each do |f|
          # we need to ensure a pristine ENV for each process or the formula
          # will start with the ENV from the previous build
          pid=fork
          if pid.nil?
            exec __FILE__, "install-just-one", f.name, *ARGV.options
          else
            Process.wait pid
          end
          #FIXME I don't think $? represents the exit code from the child forkâ€¦
          exit! $? if $? != 0 # exception in other brew will be visible on screen
        end
      end

    # this is an internal option, don't expose it to the user
    when 'install-just-one'
      require 'keg'

      f=ARGV.formulae.shift

      begin
        build_time=install f
        ohai "Caveats", f.caveats, ''
        ohai 'Finishing up' if ARGV.verbose?
        clean f
        raise "Nothing was installed to #{f.prefix}" unless f.installed?
      rescue Exception
        if f.prefix.directory?
          f.prefix.rmtree
          f.prefix.parent.rmdir_if_possible
        end
        raise
      end

      begin
        Keg.new(f.prefix).link
      rescue Exception
        onoe "The linking step did not complete successfully"
        puts "The package built, but is not symlinked into #{HOMEBREW_PREFIX}"
        puts "You can try again using `brew link #{f.name}'"
        ohai "Summary" unless ARGV.verbose?
      end

      ohai "Summary" if ARGV.verbose?
      print "#{f.prefix}: #{f.prefix.abv}"
      print ", built in #{pretty_duration build_time}" if build_time
      puts

    when 'ln', 'link'
      ARGV.kegs.each {|keg| puts "#{keg.link} links created for #{keg}"}

    when 'unlink'
      ARGV.kegs.each {|keg| puts "#{keg.unlink} links removed for #{keg}"}

    when 'rm', 'uninstall', 'remove'
      ARGV.kegs.each do |keg|
        puts "Uninstalling #{keg}..."
        keg.uninstall
      end
      prune

    when 'up', 'update'
      puts "You can't yet update :( But you can try:"
      puts "    git pull"
      puts "    brew rm foo"
      puts "    brew install foo"

    when 'prune'
      prune

    # 'make' supported until 0.7 for historic reasons
    when 'mk', 'make'
      opoo "`brew make' has changed to `brew create'"
      puts "This is because make can be confused with the `make' tool."
      puts "brew make will continue working until Homebrew 0.7"
      exec __FILE__, "create", *ARGV

    when 'create'
      if ARGV.include? '--macports'
        exec "open", "http://www.macports.org/ports.php?by=name&substr=#{ARGV.next}"
      else
        exec_editor *ARGV.collect {|name| make name}
      end

    when 'diy', 'configure'
      puts diy

    when 'info', 'abv'
      if ARGV.named_empty?
        puts `ls #{HOMEBREW_CELLAR} | wc -l`.strip+" kegs, "+HOMEBREW_CELLAR.abv
      elsif ARGV[0][0..6] == 'http://'
        puts Pathname.new(ARGV.shift).version
      else
        ARGV.named.each {|name| info name}
      end

    else
      puts ARGV.usage
  end

rescue UsageError
  onoe "Invalid usage"
  puts ARGV.usage
rescue SystemExit
  ohai "Kernel.exit" if ARGV.verbose?
rescue Interrupt => e
  # puts # seemingly a newline is typical
  # Above is now commented out because the system() call forks and then forks
  # again, so there are two of "us" so we get two exceptions raising and thus
  # two newlines, which buggers up the shell. FIXME!
  exit 130
rescue SystemCallError, RuntimeError => e
  if ARGV.debug?
    onoe e.inspect
    puts e.backtrace
  else
    onoe e
  end
>>>>>>> 0a31190fdc (Dependency resolution)
  exit 1
fi

set +o posix # as we are using bash now

# Fail fast with concise messages when PWD has issues
if [[ -z "${PWD-}" ]]
then
  echo "Error: \$PWD must be set to run brew." >&2
  exit 1
fi
if ! [[ -d "${PWD}" ]]
then
  echo "Error: The current working directory must exist to run brew." >&2
  exit 1
fi
if ! [[ -r "${PWD}" ]]
then
  echo "Error: The current working directory must be readable to ${USER} to run brew." >&2
  exit 1
fi

# Fail fast with concise message when HOME is unset
if [[ -z "${HOME:-}" ]]
then
  echo "Error: \$HOME must be set to run brew." >&2
  exit 1
fi

quiet_cd() {
  CDPATH='' cd -- "$@" &>/dev/null || return
}

symlink_target_directory() {
  local target target_dirname
  target="$(readlink "$1")"
  target_dirname="$(dirname "${target}")"
  local directory="$2"
  quiet_cd "${directory}" && quiet_cd "${target_dirname}" && pwd -P
}

# Enable and use default Bash builtins rather than user-defined functions
builtin enable compgen unset
for cmd in $(builtin compgen -A builtin)
do
  builtin unset -f "${cmd}"
  builtin enable "${cmd}"
done
unset cmd

# Avoid picking up any random `sudo` in `PATH`.
if [[ -x /usr/bin/sudo ]]
then
  SUDO=/usr/bin/sudo
else
  # Do this after ensuring we're using default Bash builtins.
  SUDO="$(command -v sudo 2>/dev/null)"
fi

# Reset sudo timestamp to avoid running unauthorized sudo commands
if [[ -n "${SUDO}" ]]
then
  "${SUDO}" --reset-timestamp 2>/dev/null || true
fi
unset SUDO

# Take the HOMEBREW_PATH if we are running brew within brew, otherwise we would lose the original path.
if [[ -n "${HOMEBREW_BREW_FILE:-}" && -n "${HOMEBREW_PATH:-}" ]]
then
  PATH="${HOMEBREW_PATH}"
fi

BREW_FILE_DIRECTORY="$(quiet_cd "${0%/*}/" && pwd -P)"
HOMEBREW_BREW_FILE="${BREW_FILE_DIRECTORY%/}/${0##*/}"
HOMEBREW_PREFIX="${HOMEBREW_BREW_FILE%/*/*}"

# Default to / prefix if unset or the bin/brew file.
if [[ -z "${HOMEBREW_PREFIX}" || "${HOMEBREW_PREFIX}" = "${HOMEBREW_BREW_FILE}" ]]
then
  HOMEBREW_PREFIX="/"
fi

HOMEBREW_REPOSITORY="${HOMEBREW_PREFIX}"

# Resolve the bin/brew symlink to find Homebrew's repository
if [[ -L "${HOMEBREW_BREW_FILE}" ]]
then
  BREW_FILE_DIRECTORY="$(symlink_target_directory "${HOMEBREW_BREW_FILE}" "${BREW_FILE_DIRECTORY}")"
  HOMEBREW_REPOSITORY="${BREW_FILE_DIRECTORY%/*}"
fi

# Try to find a /usr/local HOMEBREW_PREFIX where possible (for macOS x86_64 bottles)
if [[ -L "/usr/local/bin/brew" && ! -L "${HOMEBREW_PREFIX}/Cellar" ]]
then
  USR_LOCAL_BREW_FILE_DIRECTORY="$(symlink_target_directory "/usr/local/bin/brew" "/usr/local/bin")"
  USR_LOCAL_HOMEBREW_REPOSITORY="${USR_LOCAL_BREW_FILE_DIRECTORY%/*}"
  if [[ "${HOMEBREW_REPOSITORY}" = "${USR_LOCAL_HOMEBREW_REPOSITORY}" ]]
  then
    HOMEBREW_PREFIX="/usr/local"
  fi
  unset USR_LOCAL_BREW_FILE_DIRECTORY USR_LOCAL_HOMEBREW_REPOSITORY
fi

unset BREW_FILE_DIRECTORY

# If the location of HOMEBREW_LIBRARY changes
# keg_relocate.rb, formula_cellar_checks.rb, and test/global_spec.rb need to change.
HOMEBREW_LIBRARY="${HOMEBREW_REPOSITORY}/Library"

# Load Homebrew's variable configuration files from disk.
export_homebrew_env_file() {
  local env_file

  env_file="${1}"
  [[ -r "${env_file}" ]] || return 0
  while read -r line
  do
    # only load HOMEBREW_* lines
    [[ "${line}" = "HOMEBREW_"* ]] || continue
    export "${line?}"
  done <"${env_file}"
}

# First, load the system-wide configuration.
export_homebrew_env_file "/etc/homebrew/brew.env"

unset SYSTEM_ENV_TAKES_PRIORITY
if [[ -n "${HOMEBREW_SYSTEM_ENV_TAKES_PRIORITY-}" ]]
then
  SYSTEM_ENV_TAKES_PRIORITY="1"
fi

# Next, load the prefix configuration
export_homebrew_env_file "${HOMEBREW_PREFIX}/etc/homebrew/brew.env"

# Finally, load the user configuration
if [[ -n "${XDG_CONFIG_HOME-}" ]]
then
  HOMEBREW_USER_CONFIG_HOME="${XDG_CONFIG_HOME}/homebrew"
else
  HOMEBREW_USER_CONFIG_HOME="${HOME}/.homebrew"
fi

export_homebrew_env_file "${HOMEBREW_USER_CONFIG_HOME}/brew.env"

# If the system configuration takes priority, load it again to override any previous settings.
if [[ -n "${SYSTEM_ENV_TAKES_PRIORITY-}" ]]
then
  export_homebrew_env_file "/etc/homebrew/brew.env"
fi

# Copy and export all HOMEBREW_* variables previously mentioned in
# manpage or used elsewhere by Homebrew.

# These variables are allowed to be set by the user as, e.g., `HOMEBREW_BROWSER`.
MANPAGE_VARS=(
  BAT_CONFIG_PATH
  BAT_THEME
  BROWSER
  BUNDLE_USER_CACHE
  DISPLAY
  EDITOR
  NO_COLOR
)
for VAR in "${MANPAGE_VARS[@]}"
do
  # Skip if variable value is empty.
  [[ -z "${!VAR:-}" ]] && continue

  VAR_NEW="HOMEBREW_${VAR}"
  # Skip if existing HOMEBREW_* variable is set.
  [[ -n "${!VAR_NEW:-}" ]] && continue
  export "${VAR_NEW}"="${!VAR}"
done

# We don't want to take the user's value for, e.g., `HOMEBREW_PATH` here!
USED_BY_HOMEBREW_VARS=(
  CODESPACES
  COLORTERM
  DBUS_SESSION_BUS_ADDRESS
  NODENV_ROOT
  PATH
  PYENV_ROOT
  RBENV_ROOT
  SSH_TTY
  SUDO_USER
  TMPDIR
  TMUX
  XDG_CACHE_HOME
  XDG_DATA_DIRS
  XDG_RUNTIME_DIR
  ZDOTDIR
)
for VAR in "${USED_BY_HOMEBREW_VARS[@]}"
do
  # Skip if variable value is empty.
  [[ -z "${!VAR:-}" ]] && continue

  # We unconditionally override `HOMEBREW_*` here.
  VAR_NEW="HOMEBREW_${VAR}"
  export "${VAR_NEW}"="${!VAR}"
done

unset VAR VAR_NEW MANPAGE_VARS USED_BY_HOMEBREW_VARS

export HOMEBREW_BREW_FILE
export HOMEBREW_PREFIX
export HOMEBREW_REPOSITORY
export HOMEBREW_LIBRARY
export HOMEBREW_USER_CONFIG_HOME

# set from user environment
# shellcheck disable=SC2154
# Use VISUAL if HOMEBREW_EDITOR and EDITOR are unset.
if [[ -z "${HOMEBREW_EDITOR:-}" && -n "${VISUAL:-}" ]]
then
  export HOMEBREW_EDITOR="${VISUAL}"
fi

# set from user environment
# shellcheck disable=SC2154
# Set CI variable for Azure Pipelines and Jenkins
# (Set by default on GitHub Actions, Circle and Travis CI)
if [[ -z "${CI:-}" ]] && [[ -n "${TF_BUILD:-}" || -n "${JENKINS_HOME:-}" ]]
then
  export CI="1"
fi

if [[ -n "${GITHUB_ACTIONS:-}" && -n "${ImageOS:-}" && -n "${ImageVersion:-}" ]]
then
  export HOMEBREW_GITHUB_HOSTED_RUNNER=1
fi

# filter the user environment
PATH="/usr/bin:/bin:/usr/sbin:/sbin"

FILTERED_ENV=()
ENV_VAR_NAMES=(
  HOME SHELL PATH TERM TERMINFO TERMINFO_DIRS COLUMNS DISPLAY LOGNAME USER CI SSH_AUTH_SOCK SUDO_ASKPASS
  http_proxy https_proxy ftp_proxy no_proxy all_proxy HTTPS_PROXY FTP_PROXY ALL_PROXY
)
# Filter all but the specific variables.
for VAR in "${ENV_VAR_NAMES[@]}" "${!HOMEBREW_@}"
do
  # Skip if variable value is empty.
  [[ -z "${!VAR:-}" ]] && continue

  FILTERED_ENV+=("${VAR}=${!VAR}")
done

if [[ -n "${CI:-}" ]]
then
  for VAR in "${!GITHUB_@}"
  do
    # Skip if variable value is empty.
    [[ -z "${!VAR:-}" ]] && continue
    # Skip variables that look like tokens.
    [[ "${VAR}" = *TOKEN* ]] && continue

    FILTERED_ENV+=("${VAR}=${!VAR}")
  done
fi

if [[ -n "${HOMEBREW_RDBG:-}" ]]
then
  for VAR in "${!RUBY_DEBUG_@}"
  do
    # Skip if variable value is empty.
    [[ -z "${!VAR:-}" ]] && continue

    FILTERED_ENV+=("${VAR}=${!VAR}")
  done
fi

unset VAR ENV_VAR_NAMES

exec /usr/bin/env -i "${FILTERED_ENV[@]}" /bin/bash -p "${HOMEBREW_LIBRARY}/Homebrew/brew.sh" "$@"
